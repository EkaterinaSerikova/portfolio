#!/usr/bin/env python
import time

# pytest
from pytest import mark

# screenshot capture
import os, shutil
from threading import Thread
from e2e.utilities.screenshots import capture_screenshot

# random inputs
from e2e.utilities.random_inputs import random_phone, random_fake_email

# backend automation
from e2e.src.back_end_automation import jsons, endpoints
from e2e.src.back_end_automation.base_requests import ApiMethods

# pages
from e2e.src.front_end_automation.pages.common_elements import CommonElements
from e2e.src.front_end_automation.pages.login_page import LoginPage
from e2e.src.front_end_automation.pages.client_page import (PaymentsPage, InternalTransfersPage, ClientPage,
                                                            AccountPage)
from e2e.src.front_end_automation.pages.top_bar_page import TopBarPage
from e2e.src.front_end_automation.pages.backoffice_page import (BackofficeSidebarButtons, DepositsPage, DashboardsPage,
                                                                WithdrawalsPage, Notes)
# shortcuts
from e2e.tests.shortcuts.common_actions import CommonActions
from e2e.tests.shortcuts.create_new_user import CreateNewUser

# steps
from e2e.tests.steps.platforms.setup_platforms import SetupPlatforms
from e2e.tests.steps.trading_accounts.trading_accounts import TradingAccounts
from e2e.tests.steps.trading_accounts.payments import Payments

# etc
from e2e import settings
from time import sleep

# logs
from e2e.utilities.capture_logs import GeneralLogs


@mark.mt4
def test_make_deposit_negative_mt4(session, drv, app_config):
    # instantiate logs
    log = GeneralLogs("test_make_deposit_negative_mt4")

    page = CommonElements(drv)
    login_page = LoginPage(drv)
    top_bar_page = TopBarPage(drv)
    client_page = ClientPage(drv)
    backoffice_page = BackofficeSidebarButtons(drv)
    dashboards_page = DashboardsPage(drv)
    deposits_page = DepositsPage(drv)
    account_page = AccountPage(drv)
    notes = Notes(drv)
    withdrawals_page = WithdrawalsPage(drv)
    common_actions = CommonActions(page, login_page, top_bar_page)
    setup_platforms = SetupPlatforms(drv, app_config, session, log)
    page = CommonElements(drv)

    # launch thread for taking screenshots
    stop_thread = False
    test_name = "test_make_deposit_negative_mt4"
    ss_path = f"screenshots/{test_name}/"
    if os.path.exists(ss_path):
        shutil.rmtree(ss_path)
    os.makedirs(ss_path)
    thread = Thread(target=capture_screenshot,
                    kwargs={"driver": drv, "ss_path": ss_path, "stop_thread": lambda: stop_thread})
    thread.start()

    # instantiate logs
    log = GeneralLogs(test_name)

    # Setup Servers, Groups, Types
    setup_platforms.configure_servers_groups_types_for_mt4()

    # new user creds
    user_phone_number = "+996502" + random_phone(phone_length=6)
    user_email = random_fake_email()

    # create new user
    create_new_user = CreateNewUser(session, user_email, user_phone_number)
    create_new_user.create_new_user()

    log.add_step(f"create new user with email: {user_email}")
    log.add_step(f"and phone: {user_phone_number}")

    # update creds for user session
    jsons.AUTH_PAYLOAD["emailOrPhone"] = user_email

    # instantiate user session
    user_session = ApiMethods(app_config.url)
    user_session.get_authorized(jsons.AUTH_PAYLOAD)

    trading_accounts = TradingAccounts(log=log, page=page, session=session, user_session=user_session,
                                       common_actions=common_actions, client_page=client_page,
                                       backoffice_page=backoffice_page, dashboards_page=dashboards_page,
                                       deposits_page=deposits_page, account_page=account_page,
                                       withdrawals_page=withdrawals_page)

    # create real mt4 account
    real_mt4_account_id, real_mt4_account_number = trading_accounts.create_real_account_with_api(account_type='4')
    log.add_step(f"created a mt4 real account with number {real_mt4_account_number}, and id {real_mt4_account_id}")

    # login as new user
    common_actions.login_as_user(user_email)
    log.add_step(f"login as {user_email}")

    # click on Deposit on sidebar
    client_page.sidebar_deposit_button.click()

    # click on Confirm button
    try:
        account_page.confirm_deposit_button.click()
    except:
        page.refresh()
        account_page.confirm_deposit_button.click()

    # click on Currency dropdown
    account_page.select_currency.click()

    # click on Amount field
    account_page.deposit_amount_input_field.click()

    # click on Choose account dropdown
    account_page.select_account_type_dropdown.click()

    # click on payments form error to remove selection
    account_page.payments_form_arrow.click()

    # click on payments form error to remove selection
    account_page.payments_form_arrow.click()

    # compare error message for Currency dropdown
    assert account_page.error_select_currency.text == "Required field"

    # compare error message for Amount field
    assert account_page.error_deposit_amount_input_field.text == "Required field"

    # compare error message for Choose account dropdown
    assert account_page.error_select_account_type_dropdown.text == "Required field"

    # click on Currency dropdown
    account_page.select_currency.click()

    # choose first option in Currency dropdown
    page.select_dropdown_option_by_index(1).click()

    # click on Choose account dropdown
    account_page.select_account_type_dropdown.click()

    # choose second option in Choose account dropdown
    page.select_dropdown_option_by_index(1).click()

    # verify that continue button is disabled
    disabled_continue_button = account_page.continue_button.has_attribute("disabled")
    assert disabled_continue_button is True

    # reload page
    page.refresh()

    # click on Confirm button
    account_page.confirm_deposit_button.click()

    # fill in Amount field
    account_page.deposit_amount_input_field.input_text(100)

    # click on Currency dropdown
    account_page.select_currency.click()

    # choose first option in Currency dropdown
    page.select_dropdown_option_by_index(1).click()

    # verify that continue button is disabled
    disabled_continue_button = account_page.continue_button.has_attribute("disabled")
    assert disabled_continue_button is True

    # reload page
    page.refresh()

    # click on Confirm button
    account_page.confirm_deposit_button.click()

    # click on Account dropdown
    account_page.select_account_type_dropdown.click()

    # choose second option in Account dropdown
    page.select_dropdown_option_by_index(1).click()

    # fill in Amount field
    account_page.deposit_amount_input_field.input_text(100)

    # verify that continue button is disabled
    disabled_continue_button = account_page.continue_button.has_attribute("disabled")
    assert disabled_continue_button is True

    # click on Currency dropdown
    account_page.select_currency.click()

    # choose first option in Currency dropdown
    page.select_dropdown_option_by_index(1).click()

    # fill in Amount field with amount more than available
    account_page.deposit_amount_input_field.input_text(100000000)

    # click on Continue
    account_page.continue_button.click()
    time.sleep(5)

    # compare error message for Amount field
    assert 'Your operation is out of range. Minimum is ' in account_page.error_deposit_amount_input_field.text

    # destroy screenshots thread
    stop_thread = True


